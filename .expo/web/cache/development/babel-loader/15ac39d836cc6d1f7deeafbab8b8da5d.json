{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\CrapM\\\\Documents\\\\php\\\\ActokidsWebsite2021\\\\components\\\\ListComponents\\\\ShowPrograms.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useIsFocused } from '@react-navigation/native';\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ProgramCards from \"./ProgramCards\";\nimport FilterCriteria from \"../../types\";\nexport default function ShowPrograms(params) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filter = _useState2[0],\n      setFilter = _useState2[1];\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    console.log(\"Current Filter: \" + FilterCriteria.Criteria);\n  }, [isFocused]);\n\n  function drawCards() {\n    var _this = this;\n\n    if (params === undefined) {\n      console.log(\"Still Loading\");\n      return null;\n    } else {\n      var filteredData = applyFilter(FilterCriteria.Criteria);\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, React.createElement(FlatList, {\n        data: filteredData,\n        keyExtractor: function keyExtractor(x, i) {\n          return i.toString();\n        },\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }\n          }, React.createElement(TouchableHighlight, {\n            accessible: true,\n            accessibilityLabel: item.Program_Name,\n            accessibilityHint: \"Click here to learn more.\",\n            accessibilityRole: \"imagebutton\",\n            onPress: function onPress() {\n              params.navigation.navigate('ProgramDetailsScreen', {\n                item: item\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }\n          }, React.createElement(ProgramCards, {\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 23\n            }\n          })));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }\n      }));\n    }\n  }\n\n  function applyFilter(filter) {\n    var output = [];\n\n    if (filter.length != 0) {\n      params.programs.forEach(function (element) {\n        if (element.accessability.localeCompare(filter[0]) == 0) {\n          output.push(element);\n        }\n      });\n    } else {\n      output = params.programs;\n    }\n\n    return output;\n  }\n\n  return drawCards();\n}","map":{"version":3,"sources":["C:/Users/CrapM/Documents/php/ActokidsWebsite2021/components/ListComponents/ShowPrograms.tsx"],"names":["React","useState","useEffect","useIsFocused","ProgramCards","FilterCriteria","ShowPrograms","params","filter","setFilter","isFocused","console","log","Criteria","drawCards","undefined","filteredData","applyFilter","x","i","toString","item","Program_Name","navigation","navigate","output","length","programs","forEach","element","accessability","localeCompare","push"],"mappings":";;AASA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,0BAA7B;;;;AAQA,OAAOC,YAAP;AAEA,OAAOC,cAAP;AAEA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAAgD;AAAA,kBAGjCN,QAAQ,CAAgB,EAAhB,CAHyB;AAAA;AAAA,MAGtDO,MAHsD;AAAA,MAG9CC,SAH8C;;AAK7D,MAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEED,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBP,cAAc,CAACQ,QAAhD;AACD,GAFQ,EAEL,CAACH,SAAD,CAFK,CAAT;;AAKF,WAASI,SAAT,GAAoB;AAAA;;AAEd,QAAGP,MAAM,KAAKQ,SAAd,EACA;AACEJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO,IAAP;AACD,KAJD,MAIK;AAGH,UAAII,YAAY,GAAGC,WAAW,CAACZ,cAAc,CAACQ,QAAhB,CAA9B;AACA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEG,YADR;AAEE,QAAA,YAAY,EAAE,sBAACE,CAAD,EAAIC,CAAJ;AAAA,iBAAUA,CAAC,CAACC,QAAF,EAAV;AAAA,SAFhB;AAGE,QAAA,UAAU,EAAE;AAAA,cAAGC,IAAH,QAAGA,IAAH;AAAA,iBACV,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,kBAAD;AACE,YAAA,UAAU,EAAI,IADhB;AAEE,YAAA,kBAAkB,EAAIA,IAAI,CAACC,YAF7B;AAGE,YAAA,iBAAiB,EAAC,2BAHpB;AAIE,YAAA,iBAAiB,EAAC,aAJpB;AAKE,YAAA,OAAO,EAAG,mBAAM;AACdf,cAAAA,MAAM,CAACgB,UAAP,CAAkBC,QAAlB,CAA2B,sBAA3B,EAAmD;AAACH,gBAAAA,IAAI,EAAEA;AAAP,eAAnD;AACD,aAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAQE,oBAAC,YAAD;AAAc,YAAA,IAAI,EAAEA,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,CADF,CADU;AAAA,SAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAsBH;AACJ;;AAED,WAASJ,WAAT,CAAqBT,MAArB,EAA2C;AACzC,QAAIiB,MAAkB,GAAG,EAAzB;;AAIA,QAAGjB,MAAM,CAACkB,MAAP,IAAiB,CAApB,EAAsB;AACpBnB,MAAAA,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwB,UAAAC,OAAO,EAAI;AACjC,YAAGA,OAAO,CAACC,aAAR,CAAsBC,aAAtB,CAAoCvB,MAAM,CAAC,CAAD,CAA1C,KAAkD,CAArD,EAAuD;AAErDiB,UAAAA,MAAM,CAACO,IAAP,CAAYH,OAAZ;AACD;AAEF,OAND;AAOD,KARD,MAQK;AACHJ,MAAAA,MAAM,GAAGlB,MAAM,CAACoB,QAAhB;AACD;;AAMD,WAAOF,MAAP;AACD;;AAED,SAAQX,SAAS,EAAjB;AAED","sourcesContent":["/*\r\nActokids Project\r\nNick Bennett\r\n\r\nShow Programs is the actual component that contains the flat list, and the card\r\n\r\nTODO:\r\n*/\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useIsFocused } from '@react-navigation/native'\r\n\r\nimport {\r\n  TouchableHighlight,\r\n  View,\r\n  FlatList\r\n} from 'react-native';\r\n\r\nimport ProgramCards from './ProgramCards';\r\n\r\nimport FilterCriteria from '../../types';\r\n\r\nexport default function ShowPrograms(params: Array<Array<any>>){\r\n\r\n  //const [filter, setFilter] = useState<Array<any>>([]);\r\n  const [filter, setFilter] = useState<Array<String>>([]);\r\n\r\n  const isFocused = useIsFocused()\r\n\r\n    useEffect(() => {\r\n      console.log(\"Current Filter: \" + FilterCriteria.Criteria)\r\n    } , [isFocused])\r\n\r\n\r\n  function drawCards(){\r\n        //console.log(\"Filter: \" + filter)\r\n        if(params === undefined)\r\n        {\r\n          console.log(\"Still Loading\")\r\n          return(null)\r\n        }else{\r\n          //console.log(\"Showing Programs: \" + Object.keys(params))\r\n          \r\n          let filteredData = applyFilter(FilterCriteria.Criteria)\r\n          return( \r\n            <View>\r\n              <FlatList\r\n                data={filteredData}\r\n                keyExtractor={(x, i) => i.toString()}\r\n                renderItem={({ item }) => (\r\n                  <View >\r\n                    <TouchableHighlight \r\n                      accessible = {true}\r\n                      accessibilityLabel = {item.Program_Name}\r\n                      accessibilityHint=\"Click here to learn more.\"\r\n                      accessibilityRole=\"imagebutton\" \r\n                      onPress= {() => {\r\n                        params.navigation.navigate('ProgramDetailsScreen', {item: item});\r\n                      }}>\r\n                      <ProgramCards item={item} />\r\n                    </TouchableHighlight>\r\n                  </View>\r\n                )}\r\n              />\r\n            </View>\r\n          )\r\n      }\r\n  }\r\n\r\n  function applyFilter(filter: Array<String>){\r\n    let output: Array<any> = []\r\n\r\n    //console.log(\"Current Filter: \" + filter)\r\n\r\n    if(filter.length != 0){\r\n      params.programs.forEach(element => {\r\n        if(element.accessability.localeCompare(filter[0]) == 0){\r\n          //console.log(filter[0])\r\n          output.push(element)\r\n        }\r\n        //console.log(output)\r\n      });\r\n    }else{\r\n      output = params.programs\r\n    }\r\n    /*var arr = [1, 2, 3, 4];\r\n    arr.forEach(function (el) {\r\n      console.log(el);\r\n    })*/\r\n    //console.log(output)\r\n    return(output)\r\n  }\r\n\r\n  return (drawCards())\r\n\r\n}"]},"metadata":{},"sourceType":"module"}